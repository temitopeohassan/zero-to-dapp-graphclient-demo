schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: contract_orderBy
    orderDirection: OrderDirection
    where: contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [contract!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: account_orderBy
    orderDirection: OrderDirection
    where: account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [account!]!
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: collection_orderBy
    orderDirection: OrderDirection
    where: collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [collection!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: token_orderBy
    orderDirection: OrderDirection
    where: token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [token!]!
  holding(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): holding
  holdings(
    skip: Int = 0
    first: Int = 100
    orderBy: holding_orderBy
    orderDirection: OrderDirection
    where: holding_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [holding!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: transfer_orderBy
    orderDirection: OrderDirection
    where: transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [transfer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: contract_orderBy
    orderDirection: OrderDirection
    where: contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [contract!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: account_orderBy
    orderDirection: OrderDirection
    where: account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [account!]!
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: collection_orderBy
    orderDirection: OrderDirection
    where: collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [collection!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: token_orderBy
    orderDirection: OrderDirection
    where: token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [token!]!
  holding(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): holding
  holdings(
    skip: Int = 0
    first: Int = 100
    orderBy: holding_orderBy
    orderDirection: OrderDirection
    where: holding_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [holding!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: transfer_orderBy
    orderDirection: OrderDirection
    where: transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [transfer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type account {
  """ the wallet address """
  id: ID!
  """ The NFTs owned by this account """
  tokens(skip: Int = 0, first: Int = 100, orderBy: token_orderBy, orderDirection: OrderDirection, where: token_filter): [token!]!
  """ The transfers originating from this account """
  transfersFrom(skip: Int = 0, first: Int = 100, orderBy: transfer_orderBy, orderDirection: OrderDirection, where: transfer_filter): [transfer!]!
  """ The transfers recevied by this account"""
  transfersTo(skip: Int = 0, first: Int = 100, orderBy: transfer_orderBy, orderDirection: OrderDirection, where: transfer_filter): [transfer!]!
  """ M:M relationship for Accounts and Collections """
  holdings(skip: Int = 0, first: Int = 100, orderBy: holding_orderBy, orderDirection: OrderDirection, where: holding_filter): [holding!]!
}

input account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokens_: token_filter
  transfersFrom_: transfer_filter
  transfersTo_: transfer_filter
  holdings_: holding_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [account_filter]
  or: [account_filter]
}

enum account_orderBy {
  id
  tokens
  transfersFrom
  transfersTo
  holdings
}

"""replaces TokenRegistry"""
type collection {
  """ The address of the collection """
  id: ID!
  """ The name of the collection """
  name: String
  """ The symbol for the collection """
  symbol: String
  """ Total Supply of Tokens """
  totalSupply: BigInt
  """ Tokens for the collection"""
  tokens(skip: Int = 0, first: Int = 100, orderBy: token_orderBy, orderDirection: OrderDirection, where: token_filter): [token!]!
  """ M:M relationship for Accounts and Collections """
  holdings(skip: Int = 0, first: Int = 100, orderBy: holding_orderBy, orderDirection: OrderDirection, where: holding_filter): [holding!]!
}

input collection_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  tokens_: token_filter
  holdings_: holding_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [collection_filter]
  or: [collection_filter]
}

enum collection_orderBy {
  id
  name
  symbol
  totalSupply
  tokens
  holdings
}

type contract {
  id: ID!
  asERC721: collection
}

input contract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asERC721: String
  asERC721_not: String
  asERC721_gt: String
  asERC721_lt: String
  asERC721_gte: String
  asERC721_lte: String
  asERC721_in: [String!]
  asERC721_not_in: [String!]
  asERC721_contains: String
  asERC721_contains_nocase: String
  asERC721_not_contains: String
  asERC721_not_contains_nocase: String
  asERC721_starts_with: String
  asERC721_starts_with_nocase: String
  asERC721_not_starts_with: String
  asERC721_not_starts_with_nocase: String
  asERC721_ends_with: String
  asERC721_ends_with_nocase: String
  asERC721_not_ends_with: String
  asERC721_not_ends_with_nocase: String
  asERC721_: collection_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [contract_filter]
  or: [contract_filter]
}

enum contract_orderBy {
  id
  asERC721
  asERC721__id
  asERC721__name
  asERC721__symbol
  asERC721__totalSupply
}

type holding {
  """ Account Id - Collection Id """
  id: ID!
  """ Address of the account """
  account: account
  """ Address of the NFT Collection """
  collection: collection
  """ Count of NFT's owned in a collection by the Address"""
  tokenCount: Int!
}

input holding_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: account_filter
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  tokenCount: Int
  tokenCount_not: Int
  tokenCount_gt: Int
  tokenCount_lt: Int
  tokenCount_gte: Int
  tokenCount_lte: Int
  tokenCount_in: [Int!]
  tokenCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [holding_filter]
  or: [holding_filter]
}

enum holding_orderBy {
  id
  account
  account__id
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  tokenCount
}

type token {
  """ Ethereum / Collection Addrress - Token Id """
  id: ID!
  """ The collection address """
  collection: collection!
  """ The id of the NFT"""
  identifier: BigInt!
  """ The address the currently owns the token """
  owner: account
  """ Transfers involving this token """
  transfers(skip: Int = 0, first: Int = 100, orderBy: transfer_orderBy, orderDirection: OrderDirection, where: transfer_filter): [transfer!]!
}

input token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  identifier: BigInt
  identifier_not: BigInt
  identifier_gt: BigInt
  identifier_lt: BigInt
  identifier_gte: BigInt
  identifier_lte: BigInt
  identifier_in: [BigInt!]
  identifier_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: account_filter
  transfers_: transfer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [token_filter]
  or: [token_filter]
}

enum token_orderBy {
  id
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  identifier
  owner
  owner__id
  transfers
}

type transfer {
  """ Block Number and Event Id in which the transfers event occured"""
  id: ID!
  """ Transaction hash in which the transfer event occured"""
  transaction: Bytes!
  """ The collection address """
  collection: collection!
  """ The collection addrress - The token id """
  token: token!
  """ The sender address """
  senderAddress: account
  """ The receiver address """
  receiverAddress: account
  """ Timestamp for block """
  timestamp: Int!
  """ Block Number """
  blockNumber: Int!
}

input transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: Bytes
  transaction_not: Bytes
  transaction_gt: Bytes
  transaction_lt: Bytes
  transaction_gte: Bytes
  transaction_lte: Bytes
  transaction_in: [Bytes!]
  transaction_not_in: [Bytes!]
  transaction_contains: Bytes
  transaction_not_contains: Bytes
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: token_filter
  senderAddress: String
  senderAddress_not: String
  senderAddress_gt: String
  senderAddress_lt: String
  senderAddress_gte: String
  senderAddress_lte: String
  senderAddress_in: [String!]
  senderAddress_not_in: [String!]
  senderAddress_contains: String
  senderAddress_contains_nocase: String
  senderAddress_not_contains: String
  senderAddress_not_contains_nocase: String
  senderAddress_starts_with: String
  senderAddress_starts_with_nocase: String
  senderAddress_not_starts_with: String
  senderAddress_not_starts_with_nocase: String
  senderAddress_ends_with: String
  senderAddress_ends_with_nocase: String
  senderAddress_not_ends_with: String
  senderAddress_not_ends_with_nocase: String
  senderAddress_: account_filter
  receiverAddress: String
  receiverAddress_not: String
  receiverAddress_gt: String
  receiverAddress_lt: String
  receiverAddress_gte: String
  receiverAddress_lte: String
  receiverAddress_in: [String!]
  receiverAddress_not_in: [String!]
  receiverAddress_contains: String
  receiverAddress_contains_nocase: String
  receiverAddress_not_contains: String
  receiverAddress_not_contains_nocase: String
  receiverAddress_starts_with: String
  receiverAddress_starts_with_nocase: String
  receiverAddress_not_starts_with: String
  receiverAddress_not_starts_with_nocase: String
  receiverAddress_ends_with: String
  receiverAddress_ends_with_nocase: String
  receiverAddress_not_ends_with: String
  receiverAddress_not_ends_with_nocase: String
  receiverAddress_: account_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [transfer_filter]
  or: [transfer_filter]
}

enum transfer_orderBy {
  id
  transaction
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  token
  token__id
  token__identifier
  senderAddress
  senderAddress__id
  receiverAddress
  receiverAddress__id
  timestamp
  blockNumber
}